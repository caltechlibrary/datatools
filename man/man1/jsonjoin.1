.\" Automatically generated by Pandoc 3.0
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.PP
USAGE: jsonjoin [OPTIONS] JSON_FILE_1 [JSON_FILE_2 \&...]
.PP
DESCRIPTION
.PP
jsonjoin is a command line tool that takes one (or more) JSON objects
files and joins them to a root JSON object read from standard input (or
file identified by -input option).
By default the resulting joined JSON object is written to standard out.
.PP
The default behavior for jsonjoin is to create key/value pairs based on
the joined JSON document names and their contents.
This can be thought of as a branching behavior.
Each additional file becomes a branch and its key/value pairs become
leafs.
The root JSON object is assumed to come from standard input but can be
designated by the -input option or created by the -create option.
Each additional file specified as a command line argument is then
treated as a new branch.
.PP
In addition to the branching behavior you can join JSON objects in a
flat manner.
The flat joining process can be ether non-destructive adding new
key/value pairs (-update option) or destructive overwriting key/value
pairs (-overwrite option).
.PP
Note: jsonjoin doesn\[cq]t support a JSON array as the root JSON object.
.PP
OPTIONS
.IP
.nf
\f[C]
-create             create an empty root object, {}
-examples           display example(s)
-generate-manpage   generate man page
-generate-markdown  generate markdown docs
-h, -help           display help
-i, -input          input filename (for root object)
-l, -license        display license
-nl, -newline       if true add a trailing newline
-o, -output         output filename
-overwrite          copy all key/values into root object
-quiet              suppress error messages
-update             copy new key/values pairs into root object
-v, -version        display version
\f[R]
.fi
.PP
EXAMPLES
.PP
Consider two JSON objects one in person.json and another in
profile.json.
.PP
person.json contains
.PP
{ \[lq]name\[rq]: \[lq]Doe, Jane\[rq],
\[lq]email\[rq]:\[lq]jd\[at]example.org\[rq], \[lq]age\[rq]: 42 }
.PP
profile.json contains
.PP
{ \[lq]name\[rq]: \[lq]Doe, Jane\[rq], \[lq]bio\[rq]: \[lq]World
renowned geophysist.\[rq], \[lq]email\[rq]:
\[lq]jane.doe\[at]example.edu\[rq] }
.PP
A simple join of person.json with profile.json (note the -create option)
.PP
jsonjoin -create person.json profile.json
.PP
would yield and object like
.PP
{ \[lq]person\[rq]: { \[lq]name\[rq]: \[lq]Doe, Jane\[rq],
\[lq]email\[rq]:\[lq]jd\[at]example.org\[rq], \[lq]age\[rq]: 42},
\[lq]profile\[rq]: { \[lq]name\[rq]: \[lq]Doe, Jane\[rq], \[lq]bio\[rq]:
\[lq]World renowned geophysist.\[rq], \[lq]email\[rq]:
\[lq]jane.doe\[at]example.edu\[rq] } }
.PP
Likewise if you want to treat person.json as the root object and add
profile.json as a branch try
.PP
cat person.json | jsonjoin profile.json
.PP
or
.PP
jsonjoin -i person.json profile.json
.PP
this yields an object like
.PP
{ \[lq]name\[rq]: \[lq]Doe, Jane\[rq],
\[lq]email\[rq]:\[lq]jd\[at]example.org\[rq], \[lq]age\[rq]: 42,
\[lq]profile\[rq]: { \[lq]name\[rq]: \[lq]Doe, Jane\[rq], \[lq]bio\[rq]:
\[lq]World renowned geophysist.\[rq], \[lq]email\[rq]:
\[lq]jane.doe\[at]example.edu\[rq] } }
.PP
You can modify this behavor with -update or -overwrite.
Both options are order dependant (i.e.\ not associative, A update B does
not necessarily equal B update A).
.IP \[bu] 2
-update will add unique key/values from the second object to the first
object
.IP \[bu] 2
-overwrite replace key/values in first object one with second
objects\[cq]
.PP
Running
.IP
.nf
\f[C]
jsonjoin -create -update person.json profile.json
\f[R]
.fi
.PP
would yield
.PP
{ \[lq]name\[rq]: \[lq]Doe, Jane\[rq],
\[lq]email\[rq]:\[lq]jd\[at]example.org\[rq], \[lq]age\[rq]: 42,
\[lq]bio\[rq]: \[lq]World renowned geophysist.\[rq] }
.PP
Running
.IP
.nf
\f[C]
jsonjoin -create -update profile.json person.json
\f[R]
.fi
.PP
would yield
.PP
{ \[lq]name\[rq]: \[lq]Doe, Jane\[rq], \[lq]age\[rq]: 42, \[lq]bio\[rq]:
\[lq]World renowned geophysist.\[rq], \[lq]email\[rq]:
\[lq]jane.doe\[at]example.edu\[rq] }
.PP
Running
.IP
.nf
\f[C]
jsonjoin -create -overwrite person.json profile.json
\f[R]
.fi
.PP
would yield
.PP
{ \[lq]name\[rq]: \[lq]Doe, Jane\[rq],
\[lq]email\[rq]:\[lq]jane.doe\[at]example.edu\[rq], \[lq]age\[rq]: 42,
\[lq]bio\[rq]: \[lq]World renowned geophysist.\[rq] }
.PP
jsonjoin 1.2.1
