.\" Automatically generated by Pandoc 3.0
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.PP
USAGE: jsonrange [OPTIONS] [DOT_PATH_EXPRESSION]
.PP
DESCRIPTION
.PP
jsonrange returns returns a range of values based on the JSON structure
being read and options applied.
Without options the JSON structure is read from standard input and
writes a list of keys to standard out.
Keys are either attribute names or for arrays the index position
(counting form zero).
If a DOT_PATH_EXPRESSION is included on the command line then that is
used to generate the results.
Using options to can choose to read the JSON data structure from a file,
write the output to a file as well as display values instead of keys.
a list of \[lq]keys\[rq] of an index or map in JSON.
.PP
Using options it can also return a list of values.
The JSON object is read from standard in and the resulting list is
normally written to standard out.
There are options to read or write to files.
Additional parameters are assumed to be a dot path notation select the
parts of the JSON data structure you want from the range.
.PP
DOT_PATH_EXPRESSION is a dot path stale expression indicating what you
want range over.
E.g.
.IP \[bu] 2
\&.
would indicate the whole JSON data structure read is used to range over
.IP \[bu] 2
\&.name would indicate to range over the value pointed at by the
\[lq]name\[rq] attribute
.IP \[bu] 2
[\[lq]name\[rq]] would indicate to range over the value pointed at by
the \[lq]name\[rq] attribute
.IP \[bu] 2
[0] would indicate to range over the value held in the zero-th element
of the array
.PP
The path can be chained together
.IP \[bu] 2
\&.name.family would point to the value heald by the \[lq]name\[rq]
attributes\[cq] \[lq]family\[rq] attribute.
.PP
OPTIONS
.IP
.nf
\f[C]
-d, -delimiter       set delimiter for range output
-examples            display example(s)
-generate-manpage    generate man page
-generate-markdown   generate markdown docs
-h, -help            display help
-i, -input           read JSON from file
-l, -license         display license
-last                return the index of the last element in list (e.g. length - 1)
-length              return the number of keys or values
-limit               limit the number of items output
-nl, -newline        if true add a trailing newline
-o, -output          write to output file
-quiet               suppress error messages
-v, -version         display version
-values              return the values instead of the keys
\f[R]
.fi
.PP
EXAMPLES
.PP
Working with a map
.IP
.nf
\f[C]
echo \[aq]{\[dq]name\[dq]: \[dq]Doe, Jane\[dq], \[dq]email\[dq]:\[dq]jane.doe\[at]example.org\[dq], \[dq]age\[dq]: 42}\[aq] \[rs]
   | jsonrange
\f[R]
.fi
.PP
This would yield
.IP
.nf
\f[C]
name
email
age
\f[R]
.fi
.PP
Using the -values option on a map
.IP
.nf
\f[C]
echo \[aq]{\[dq]name\[dq]: \[dq]Doe, Jane\[dq], \[dq]email\[dq]:\[dq]jane.doe\[at]example.org\[dq], \[dq]age\[dq]: 42}\[aq] \[rs]
  | jsonrange -values
\f[R]
.fi
.PP
This would yield
.IP
.nf
\f[C]
\[dq]Doe, Jane\[dq]
\[dq]jane.doe\[at]example.org\[dq]
42
\f[R]
.fi
.PP
Working with an array
.IP
.nf
\f[C]
echo \[aq][\[dq]one\[dq], 2, {\[dq]label\[dq]:\[dq]three\[dq],\[dq]value\[dq]:3}]\[aq] | jsonrange
\f[R]
.fi
.PP
would yield
.IP
.nf
\f[C]
0
1
2
\f[R]
.fi
.PP
Using the -values option on the same array
.IP
.nf
\f[C]
echo \[aq][\[dq]one\[dq], 2, {\[dq]label\[dq]:\[dq]three\[dq],\[dq]value\[dq]:3}]\[aq] | jsonrange -values
\f[R]
.fi
.PP
would yield
.IP
.nf
\f[C]
one
2
{\[dq]label\[dq]:\[dq]three\[dq],\[dq]value\[dq]:3}
\f[R]
.fi
.PP
Checking the length of a map or array or number of keys in map
.IP
.nf
\f[C]
echo \[aq][\[dq]one\[dq],\[dq]two\[dq],\[dq]three\[dq]]\[aq] | jsonrange -length
\f[R]
.fi
.PP
would yield
.IP
.nf
\f[C]
3
\f[R]
.fi
.PP
Check for the index of last element
.IP
.nf
\f[C]
echo \[aq][\[dq]one\[dq],\[dq]two\[dq],\[dq]three\[dq]]\[aq] | jsonrange -last
\f[R]
.fi
.PP
would yield
.IP
.nf
\f[C]
2
\f[R]
.fi
.PP
Check for the index value of last element
.IP
.nf
\f[C]
echo \[aq][\[dq]one\[dq],\[dq]two\[dq],\[dq]three\[dq]]\[aq] | jsonrange -values -last
\f[R]
.fi
.PP
would yield
.IP
.nf
\f[C]
\[dq]three\[dq]
\f[R]
.fi
.PP
Limitting the number of items returned
.IP
.nf
\f[C]
echo \[aq][10,20,30,40,50]\[aq] | %!s(MISSING) -limit 2
\f[R]
.fi
.PP
would yield
.IP
.nf
\f[C]
1
2
\f[R]
.fi
.PP
Limitting the number of values returned
.IP
.nf
\f[C]
echo \[aq][10,20,30,40,50]\[aq] | %!s(MISSING) -values -limit 2
\f[R]
.fi
.PP
would yield
.IP
.nf
\f[C]
10
20
\f[R]
.fi
.PP
jsonrange 1.2.1
