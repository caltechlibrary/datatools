.\" Automatically generated by Pandoc 3.1.12
.\"
.TH "sql2csv" "1" "2024\-02\-27" "user manual" "version 1.2.7 a2bbe4b"
.SH NAME
sql2csv
.SH SYNOPSIS
sql2csv OPTIONS SQL_STATEMENT
.PP
sql2csv OPTIONS CONFIG_FILE SQL_STATEMENT
.SH DESCRIPTION
sql2csv takes a config file describing a SQL database connection and
output options needed and a SQL statement as the final parameter.
The output of the SQL query is rendered in CSV format to standard out.
sql2csv supports querying MySQL 8, Postgres and SQLite3 databases.
.PP
The configuration file is a JSON document with the following key value
pairs.
.TP
dsn_url
(string) A data source name in URL form where the \[lq]protocol\[rq]
element identifies the database resource being accessed
(e.g.\ \[lq]sqlite://\[rq], \[lq]mysql://\[rq], \[lq]postgres://\[rq]).
A data source name are rescribed at \c
.UR https://go.dev/wiki/SQLInterface
.UE \c
\&.
For the specificly supported datatabase connection strings see \c
.UR https://pkg.go.dev/github.com/glebarez/go-sqlite
.UE \c
, \c
.UR https://pkg.go.dev/github.com/go-sql-driver/mysql#readme-dsn-data-source-name
.UE \c
\ and \c
.UR https://pkg.go.dev/github.com/lib/pq
.UE \c
.TP
header_row
(boolean) if true print a header row in the output, false for no header
row output
.TP
delimiter
(single character, default is \[lq],\[rq]), sets the field delimited
used in output.
It can be set to \[lq] for tab separated values.
.TP
use_crlf
(boolean, default is false) if set to true to use \[lq]\[rq] as the line
terminator between rows of output.
.PP
To connect with a database sql2csv relies on a data source name (DSN) in
URL format.
In the URL form the URL\[cq]s scheme indicates the type of database you
are connecting to (e.g.\ sqlite, mysql, postgres).
The rest of the DNS has the following form
.IP
.EX
[username[:password]\[at]][protocol[(address)]]/dbname[?param1=value1&...&paramN=valueN]
.EE
.PP
For a simple database like SQLite3 a minimal DSN in url form for a
database file \[lq]my_database.sqlite3\[rq] would look like
.IP
.EX
    sqlite://file:my_database.sqlite3
.EE
.PP
For MySQL you need to provide more information to connect
(e.g.\ username, password).
In this example the username is \[lq]jane.doe\[rq], password is
\[lq]something_secret\[rq] the database is \[lq]my_database\[rq].
(this example assumes that MySQL 8 is running on localhost at the usual
port).
.IP
.EX
    mysql://jane.doe:something_secret\[at]/my_database
.EE
.PP
Postgres is similar to the MySQL connection string except the
\[lq]scheme\[rq] is \[lq]postgres\[rq] instead of \[lq]mysql\[rq].
.SH OPTIONS
.TP
\-help
display help
.TP
\-version
display version
.TP
\-license
display license
.PP
A the following options will override a configuration.
.TP
\-dsn
use the data source name in URL form instead of a JSON configuration
file
.TP
\-header
use a header row if true, false skip the header row
.TP
\-delimiter
Set the delimiter to use, default is comma
.TP
\-use\-cdlf
Force the line ending per row to carage return and line feed if true,
false use line feed
.TP
\-sql FILENAME
Read sql statement from a file instead of the command line.
.SH EXAMPLES
Using the \[lq]dbcfg.json\[rq] configuration file, display ten rows from
table \[lq]mytable\[rq] in database indicated in \[lq]dbcfg.json\[rq].
.IP
.EX
  sql2csv dbcfg.json \[aq]SELECT * FROM mytable LIMIT 10\[aq]
.EE
.PP
The CSV output is written standard out and can be redirected into a file
if desired.
.IP
.EX
  sql2csv dbcfg.json \[aq]SELECT * FROM mytable LIMIT 10\[aq] \[rs]
      >ten\-rows.csv
.EE
.PP
Read SQL from a file and connect to Postgres without SSL you can pass
the \f[CR]\-sql\f[R] and \f[CR]\-dsn\f[R] options.
.IP
.EX
sql2csv \[rs]
  \-dsn \[dq]postgres://${USER}\[at]/${DB_NAME}?sslmode=disable\[dq] \[rs]
  \-sql query.sql \[rs]
  >my_data.csv
.EE
.SH AUTHORS
R. S. Doiel.
