.\" Automatically generated by Pandoc 3.1.12
.\"
.TH "jsoncols" "1" "{release_date}" "user manual" "version 1.2.6 {release_hash}"
.SH NAME
jsoncols
.SH SYNOPSIS
jsoncols OPTIONS [EXPRESSION] [INPUT_FILENAME] [OUTPUT_FILENAME]
.SH DESCRIPTION
jsoncols provides scripting flexibility for data extraction from JSON
data returning the results in columns.
This is helpful in flattening content extracted from JSON blobs.
The default delimiter for each value extracted is a comma.
This can be overridden with an option.
.IP \[bu] 2
EXPRESSION can be an empty string or dot notation for an object\[cq]s
path
.IP \[bu] 2
INPUT_FILENAME is the filename to read or a dash \[lq]\-\[rq] if you
want to explicitly read from stdin
.RS 2
.IP \[bu] 2
if not provided then jsoncols reads from stdin
.RE
.IP \[bu] 2
OUTPUT_FILENAME is the filename to write or a dash \[lq]\-\[rq] if you
want to explicitly write to stdout
.RS 2
.IP \[bu] 2
if not provided then jsoncols write to stdout
.RE
.SH OPTIONS
.TP
\-help
display help
.TP
\-license
display license
.TP
\-version
display version
.TP
\-csv
output as CSV or other flat delimiter row
.TP
\-d, \-delimiter
set the delimiter for multi\-field csv output
.TP
\-i, \-input
input filename
.TP
\-nl, \-newline
if true add a trailing newline
.TP
\-o, \-output
output filename
.TP
\-p, \-pretty
pretty print JSON output
.TP
\-quiet
suppress error messages
.TP
\-quote
quote strings and JSON notation
.TP
\-r, \-repl
run interactively
.SH EXAMPLES
If myblob.json contained
.IP
.EX
    {\[dq]name\[dq]: \[dq]Doe, Jane\[dq], \[dq]email\[dq]:\[dq]jane.doe\[at]example.org\[dq], \[dq]age\[dq]: 42}
.EE
.PP
Getting just the name could be done with
.IP
.EX
    jsoncols \-i myblob.json .name
.EE
.PP
This would yield
.IP
.EX
    \[dq]Doe, Jane\[dq]
.EE
.PP
Flipping .name and .age into pipe delimited columns is as easy as
listing each field in the expression inside a space delimited string.
.IP
.EX
    jsoncols \-i myblob.json \-d\[rs]|  .name .age
.EE
.PP
This would yield
.IP
.EX
    Doe, Jane|42
.EE
.PP
You can also pipe JSON data in.
.IP
.EX
    cat myblob.json | jsoncols .name .email .age
.EE
.PP
Would yield
.IP
.EX
   \[dq]Doe, Jane\[dq],\[dq]jane.doe\[at]xample.org\[dq],42
.EE
.PP
jsoncols 1.2.6
.SH AUTHORS
R. S. Doiel.
